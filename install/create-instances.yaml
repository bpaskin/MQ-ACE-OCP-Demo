---
# create platform navigator instance
apiVersion: integration.ibm.com/v1beta1
kind: PlatformNavigator
metadata:
   name: platform-navigator
   namespace: demo
spec:
   license: 
      accept: true
      license: L-RJON-CJR2RX
   mqdashboard: true
   replicas: 1
   version: 2022.4.1
   storage:
     class: 'ocs-storagecluster-cephfs'
---
# Create ACE Dashboard
apiVersion: appconnect.ibm.com/v1beta1
kind: Dashboard
metadata:
  name: ace-dashboard
  namespace: demo
spec:
  license:
    accept: true
    license: L-MJTK-WUU8HE
    use: CloudPakForIntegrationNonProduction
  pod:
    containers:
      content-server:
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 50Mi
      control-ui:
        resources:
          limits:
            memory: 512Mi
          requests:
            cpu: 50m
            memory: 125Mi
  storage:
    size: 5Gi
    type: persistent-claim
    class: ocs-storagecluster-cephfs
  replicas: 1
  useCommonServices: true
  version: 12.0.8
---
# ACE Designer
apiVersion: appconnect.ibm.com/v1beta1
kind: DesignerAuthoring
metadata:
  name: ace-designer
  namespace: demo
spec:
  license:
    accept: true
    license: L-MJTK-WUU8HE
    use: CloudPakForIntegrationNonProduction
  couchdb:
    storage:
      size: 10Gi
      type: persistent-claim
      class: ocs-storagecluster-cephfs
    replicas: 1
  designerMappingAssist:
    incrementalLearning:
      schedule: Every 15 days
    enabled: true
  designerFlowsOperationMode: local
  replicas: 1
  useCommonServices: true
  version: 12.0.8
---
# create MQ secrets for the key/trust store
kind: Secret
apiVersion: v1
metadata:
  name: mq-tls
  namespace: demo
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDVENDQWZHZ0F3SUJBZ0lVR0tiaE5ZWXJMZVdqUFBVTlp5RldJTjJQWExRd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZERVNNQkFHQTFVRUF3d0piRzlqWVd4b2IzTjBNQjRYRFRJd01ERXdOakV3TURjeU4xb1hEVE13TURFdwpNekV3TURjeU4xb3dGREVTTUJBR0ExVUVBd3dKYkc5allXeG9iM04wTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGCkFBT0NBUThBTUlJQkNnS0NBUUVBem5EbkpGaHhFMGRMTFdhOUZZQlBvakZNdWVSL1pESXJZTEE0OGFWYVNNYU8KRjhNT0o0RGpHQWJ1L0UwbjlIR3JxSXI5bnRSc29SZkhjMFdhcExDcFdwdXdnWlBFSXVXR25MS2xjdVJtYnRVVApUUlkvQkhITEtrVUFncnlCUXVqZFh2RFRobnltYXZCUGpLM1QxZlZFMGNFT1lHQTlHanJYU0IzT2hQR1pHQmxOCmM5NXppZEZSOVZyWHQwRFJDVkFrNjRmYlRoa3V2SDh1TkV1VGFodlVFOVJIZmRzajJzZU81S0k3bmdYMG1IUUIKcUlMdVAzcGEreU1WNUc4TlBaalN4U0IwQjNlS3YraUNjV2hSdTZSRmIyZmNmZXpnbm1TcFJYVTUwS1lxV1piZApvc0czaFFxU1JRUTJZUmR5NzZaMGJKb3FGM3N0aGJJaTZ5TmYvTVQ5ZndJREFRQUJvMU13VVRBZEJnTlZIUTRFCkZnUVVIQlBGY0FyTy9ZUmxiZ0tobmkxSVdnS0Z5VEF3SHdZRFZSMGpCQmd3Rm9BVUhCUEZjQXJPL1lSbGJnS2gKbmkxSVdnS0Z5VEF3RHdZRFZSMFRBUUgvQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBWkZ6SQpaLzZOay9TQmY0WXJHdVdNSzVjTTRLdldjWUdXQWlndTZ1TzZvV2VUVmdYamtGbE9GZ2RHRVhpSjFZNi9mRFBCCitaMVE0SERMYm1hbGE1aXRqeVhXbWFsRTFFOHR2bThGMDA5ZEFPL0oxUmNyS1VZcUFKbGJQNTZtbmt1QmtqZE0KYzAyMkhXOTd0RUpkYXViTlF2ZWJraDhZK1loUGVkV242ZmFtMVM1S2cwYUlVUWRKd0FuZDlCb2hLVkk3SHFFZgpoUktDYmJFZzNySXlSS0FLdk5DRXlvMjY4b3VIcll3Mi9WMEhMU0VnWEU3UTFxWTVKaXF6Y3Iyb0EvU2xZdGZwCnZYZFhKajA3OGJ1N3hrS2FxZkxpN3FTSzdjSVRjWjNWcldGOWZCbEh5MVV1K2V1NVNhN29udFR2MktON2Joc1QKNGczVTlMdWR2L01xTE5EWDVnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE9jT2NrV0hFVFIwc3QKWnIwVmdFK2lNVXk1NUg5a01pdGdzRGp4cFZwSXhvNFh3dzRuZ09NWUJ1NzhUU2YwY2F1b2l2MmUxR3loRjhkegpSWnFrc0tsYW03Q0JrOFFpNVlhY3NxVnk1R1p1MVJOTkZqOEVjY3NxUlFDQ3ZJRkM2TjFlOE5PR2ZLWnE4RStNCnJkUFY5VVRSd1E1Z1lEMGFPdGRJSGM2RThaa1lHVTF6M25PSjBWSDFXdGUzUU5FSlVDVHJoOXRPR1M2OGZ5NDAKUzVOcUc5UVQxRWQ5MnlQYXg0N2tvanVlQmZTWWRBR29ndTQvZWxyN0l4WGtidzA5bU5MRklIUUhkNHEvNklKeAphRkc3cEVWdlo5eDk3T0NlWktsRmRUblFwaXBabHQyaXdiZUZDcEpGQkRaaEYzTHZwblJzbWlvWGV5MkZzaUxyCkkxLzh4UDEvQWdNQkFBRUNnZ0VBQ0czcndqd3FRZE5EYXBNclhWbGo1d2VFVG9MYUFNbGJwQk1PQUMvMFE4eDMKdU5pcUYwclgrdjh0ZXZmYmpjdW1hcmRpSzc0WXdXc3JKYlhOM3JPbjlwOHMwZDJxd0pJR3NSZEtVaXFwVkJVMwpPSXFVQUNaMVdVQ0FDTmFSb0ozSmpEcmhLRGltd3U4VkVIVjRsTi95ODIyaW5LVFJXZVRWTFlpcUNodWpXS3g5CkNvUU9qeFpkZFFxV0xNbEtndFRQOGUxSTI2MmNUbVhzVzhhSWQ4dDVpWUZmcFc2OHpLTzZqSmRVWktpdnE2MkcKc3hqYnF5Kzk1SitqbzBLeWUybzN0M2NFempJUEk4L1hhRmllTlFFTUZtRWVlVzVSNE1iZ3VNblpocTBVV1BzSwpWdHE0Ukp2OW02aC9RWGlqMGVCY281Rnp2MFB5RHZtUFkrZWUwT1plQVFLQmdRRHBQUm9wanpMYjhFRnUzcnU2Cktyc1BNYzUvbUc4S1pmY0NGejdjSHRQdTJEQzZxTytpRXhkVk5xZ2h6ZGtLK05kalFGUGNmdlRQZXhCOWhsWUEKN0NtOE1QRkxSNUhNditFL3BSQm5UNzVLZHdhT2NjT21ibFNGSE1LSjhJVXZld3daaERhQWFFWlNmQld0TU9GdwpKa0FrTDdMTWxkL0Ixbk9LaDM5YmR1ZEpRUUtCZ1FEaWxsT3ZGVkVjaUxyM28yR1JzUnhIK1lMQkJjbUZpSEo2CngzQ1JNQjRPMldZMjJPYXpsZVJZUXdqdU1PS2xGNmNiR0VBR1JKaVRIbGo2MFE0cXVwbERrbVJTdWVJcnBRMTEKU3A1MnMranY3WXpZdFpxUG00UzFtaG9xcU1iRDg2V2VEZnp6RUIweWJPUk8xZW04NXRqZStoN3FvN0Y5QWUrSwplU29TUDduV3Z3S0JnQUpTQlV5Y2pCajhEdXFYZEs2cGRpcjBoK1ZsRXRXN3BmVnpYY0M2M2NqbWhiV1ZzS3lnCkcvOVJCK011TlJhUzJ6RzFsaC8vYzFnTkZXRHFVVGk1SU1FcWkzd0FQa2NYTVpwOGZlbEpOYzl2MTdUYkZPTTIKL2NoRlBQbzZWbGplbElROGVINVdpenlPMTNoZG9DQ0pnT0hiUjZBWmJaeDBFYm96RnVWR0RZOEJBb0dBUCs1QQpRRWNZY3ArVmVTZU04T2x5M0UvbTk0VWxmZHFveWtHWlhpMmdYWG96WDhoRkYyaDBXLzdWOXphdHkvem5kanFhClhlcGV6aXVpMlduQXdJZVRsTUFxTkRra09rSkFrTlp6N1hRSGhpS1ZPZFBMZnpkVzgxSStqY2kvQkN5cmp2UE4KYWRzakVjWXRpSnpNYlRNSS82aThybUZ2UTZFWE1BL05zZ1p1N2NzQ2dZRUFpN2RWYzhkNmNUUVFKR05HL0l4Vwo2d1dJN1U3V094OTNVTlFEZGVyQUhNeFRBMXRKbHdTRmtNUzYrWXAvZzU0K0tTQWZLTWw4eDVUTnRxM1lpUEdiCkozOGtVU2lxV2VudFYzeExMVmJMRTRUYXgxbkptK0ZFNDV4VWxwYjJyTU5kYjFuOFpOdkVrTTJsRElUMHBKOWUKU3EvWkZXMG1jSGdjVWRpdm93WHJLNVE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
type: Opaque
---
# ConfigMap for the QMGRs
kind: ConfigMap
apiVersion: v1
metadata:
  name: mq-mqsc
  namespace: demo
data:
  mqsc: |
    DEFINE QLOCAL(IN.Q) DEFPSIST(YES)
    DEFINE QLOCAL(OUT.Q) DEFPSIST(YES)
    DEFINE CHANNEL(EXTERNAL.SVRCONN) CHLTYPE(SVRCONN) TRPTYPE(TCP) 
    SET CHLAUTH(EXTERNAL.SVRCONN) TYPE(BLOCKUSER) USERLIST(NOBODY)
    REFRESH SECURITY TYPE(CONNAUTH)
---
# QMGR for BankNet
apiVersion: mq.ibm.com/v1beta1
kind: QueueManager
metadata:
  namespace: demo
  name: banknet-qm
spec:
  license:
    accept: true
    license: L-RJON-CJR2RX
    use: NonProduction
  web:
    enabled: true
  version: 9.3.2.1-r2
  template:
    pod:
      containers:
        - env:
            - name: MQSNOAUT
              value: 'yes'
          name: qmgr
  queueManager:
    name: BANKNET
    mqsc:
      - configMap:
          items:
            - mqsc
          name: mq-mqsc
    availability:
      type: NativeHA
    storage:
      queueManager:
        type: persistent-claim
      defaultClass: ocs-storagecluster-cephfs
#  pki:
#    keys:
#    - name: default
#      secret:
#        secretName: mq-tls
#        items:
#          - tls.key
#          - tls.crt
---
# Create QMGR to the Banks
apiVersion: mq.ibm.com/v1beta1
kind: QueueManager
metadata:
  namespace: demo
  name: bank-qm
spec:
  license:
    accept: true
    license: L-RJON-CJR2RX
    use: NonProduction
  web:
    enabled: true
  version: 9.3.2.1-r2
  template:
    pod:
      containers:
        - env:
            - name: MQSNOAUT
              value: 'yes'
          name: qmgr
  queueManager:
    name: BANK
    mqsc:
      - configMap:
          items:
            - mqsc
          name: mq-mqsc
    availability:
      type: SingleInstance
    storage:
      queueManager:
        type: ephemeral
#  pki:
#    keys:
#    - name: default
#      secret:
#        secretName: mq-tls
#        items:
#          - tls.key
#          - tls.crt
---
# Create image streams to hold Liberty images
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: fake-olm-app
  namespace: demo
spec:
  lookupPolicy:
    local: false
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: bank-client-app
spec:
  lookupPolicy:
    local: false
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: bank-auth-app 
  namespace: demo
spec:
  lookupPolicy:
    local: false
---
# Store Liberty image
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: liberty
  namespace: demo
spec:
  lookupPolicy:
    local: false
  tags:
    - name: liberty
      annotations: null
      from:
        kind: DockerImage
        name: 'icr.io/appcafe/websphere-liberty:full-java17-openj9-ubi'
      generation: 1
      importPolicy: {}
      referencePolicy:
        type: Source
---
# GitHub access
kind: Secret
apiVersion: v1
metadata:
   name: github-key
   namespace: demo
data:
   password: Z2hwX1ZEdnphZzJIMUdYd1FLaXVhak9PTVVRS1JMTnRneTBmZTdtWg==
type: kubernetes.io/basic-auth
---
# BuildConfig for fakeOLM app
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: fake-olm-build
  labels:
    app: fake-olm-build
spec:
  source:
    type: Git
    git:
      uri: https://github.com/bpaskin/MQ-ACE-OCP-Demo
    contextDir: FakeOLM
    sourceSecret:
       name: github-key
  strategy:
    type: Docker                      
    dockerStrategy:
      dockerfilePath: Dockerfile
      from:
        kind: ImageStreamTag       
        namespace: demo
        name: liberty:liberty
  output:
    to:
      kind: ImageStreamTag
      name: fake-olm-app:latest
  triggers:
     - type: ImageChange
     - type: GitHub
       github:
          secretReference:
             name: github-key
---
# build client app
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: bank-client-build
  labels:
    app: bank-client-build
spec:
  source:
    type: Git
    git:
      uri: https://github.com/bpaskin/MQ-ACE-OCP-Demo
    contextDir: BankClient
    sourceSecret:
       name: github-key
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Dockerfile
      from:
        kind: ImageStreamTag  
        namespace: demo
        name: liberty:liberty
  output:
    to:
      kind: ImageStreamTag
      name: bank-client-app:latest
  triggers:
     - type: ImageChange
       imageChange: {}
     - type: GitHub
       github:
          secretReference:
             name: github-key
---
# build bank auth app
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: bank-auth-build
  labels:
    app: bank-auth-build
spec:
  source:
    type: Git
    git:
      uri: https://github.com/bpaskin/MQ-ACE-OCP-Demo
    contextDir: BankAuth
    sourceSecret:
       name: github-key
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Dockerfile
      from:
        kind: ImageStreamTag
        namespace: demo
        name: liberty:liberty
  output:
    to:
      kind: ImageStreamTag
      name: bank-auth-app:latest
  triggers:
     - type: ImageChange
       imageChange: {}
     - type: GitHub
       github:
          secretReference:
             name: github-key
---
# Create Fake OLM App
apiVersion: liberty.websphere.ibm.com/v1
kind: WebSphereLibertyApplication
metadata:  
   name: fake-olm-app  
   namespace: demo
spec:  
   license:    
      accept: true    
      edition: IBM WebSphere Application Server    
      productEntitlementSource: Standalone  
   applicationImage: 'image-registry.openshift-image-registry.svc:5000/demo/fake-olm-app:latest'  
   expose: false  
   manageTLS: false  
   replicas: 1  
   applicationName: FakeOLM  
   pullPolicy: Always
   networkPolicy:
    disable: true
---
# Create variables for Bank Client to pull in
apiVersion: v1
kind: Secret
metadata:
   name: bank-client-vars
   namespace: demo
stringData:
   MQ.HOST: "banknet-qm-ibm-mq"
   MQ.PORT: "1414"
   MQ.CHANNEL: "EXTERNAL.SVRCONN"
   MQ.CIPHERSUITE: "*TLS12"
   MQ.INBOUND.Q: "IN.Q"
   MQ.OUTBOUND.Q: "OUT.Q"
   MQ.QMGR: "BANKNET"
   MQ.EXPIRY: "30000"
---
# Bank Client is the entry into the app
apiVersion: liberty.websphere.ibm.com/v1
kind: WebSphereLibertyApplication
metadata:
  name: bank-client-app
  namespace: demo
spec:
  license:
    accept: true
    edition: IBM WebSphere Application Server
    productEntitlementSource: Standalone
  route:
    termination: passthrough
  service:
    port: 9443
  applicationImage: 'image-registry.openshift-image-registry.svc:5000/demo/bank-client-app:latest'
  expose: true
  manageTLS: true
  replicas: 1
  autoscaling:
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 50
  applicationName: BankClient
  pullPolicy: Always
  volumeMounts:
  - mountPath: /config/variables/
    name: variables
    readOnly: true
  volumes:
  - name: variables
    secret:
      secretName: bank-client-vars
---
# Bank Auth is the entry into the app
apiVersion: liberty.websphere.ibm.com/v1
kind: WebSphereLibertyApplication
metadata:
  name: bank-auth-app
  namespace: demo
spec:       
  license:
    accept: true 
    edition: IBM WebSphere Application Server
    productEntitlementSource: Standalone
  applicationImage: 'image-registry.openshift-image-registry.svc:5000/demo/bank-auth-app:latest'
  expose: false
  manageTLS: false
  replicas: 1
  autoscaling:
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 70
  applicationName: BankAuth
  pullPolicy: Always
---
# Store ACE Images
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: appconnect
  namespace: demo
spec:
  lookupPolicy:
    local: false
  tags:
    - name: appconnect
      annotations: null
      from:
        kind: DockerImage
        name: 'cp.icr.io/cp/appc/ace-server-prod@sha256:c41154c17a30bbbb6e1e4593c965f49ef3c86260e71143b8f33a6fbca277a3b9'
      generation: 1
      importPolicy: {}
      referencePolicy:
        type: Source
---
kind: ImageStream 
apiVersion: image.openshift.io/v1
metadata:
  name: banknet-app
spec:
  lookupPolicy:
    local: false
---
# Build Config for ACE App
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: ace-banking-build
  labels:
    app: ace-banking-build
spec:
  source:
    type: Git
    git:
      uri: https://github.com/bpaskin/MQ-ACE-OCP-Demo
    contextDir: BankNet
    sourceSecret:
       name: github-key
  strategy:
    type: Docker
    dockerStrategy:
      dockerfilePath: Dockerfile
      from:
        kind: ImageStreamTag
        namespace: demo
        name: appconnect:appconnect
  output:
    to:
      kind: ImageStreamTag
      name: banknet-app:latest
  triggers:
     - type: ImageChange
       imageChange: {}
     - type: GitHub
       github:
          secretReference:
             name: github-key
---
# Add ACE Instance
apiVersion: appconnect.ibm.com/v1beta1
kind: IntegrationRuntime
metadata:
  annotations:
    appconnect.ibm.com/hibernate: 'false'
  name: ace-banknet
  namespace: demo
spec:
  replicas: 1
  flowType:
    toolkitFlow: true
  license:
    accept: true
    license: L-MJTK-WUU8HE
    use: CloudPakForIntegrationProduction
  template:
    spec:
      containers:
        - image: >-
            image-registry.openshift-image-registry.svc:5000/demo/banknet-app:latest
          imagePullPolicy: Always
          name: runtime
          resources:
            requests:
              cpu: 300m
              memory: 368Mi
  version: 12.0.8.0-r1
---
# Horitizal Scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ace-banknet-scaling
  namespace: demo
spec:
  scaleTargetRef:
    kind: IntegrationRuntime
    name: ace-banknet
    apiVersion: appconnect.ibm.com/v1beta1
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 40
  behavior:
    scaleDown:
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
...
